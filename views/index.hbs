<!doctype html>
<meta charset=utf-8>
<title>nano-ci-client</title>

<link rel="stylesheet" type="text/css" href="/css/style.css">

<h1>nano ci client</h1>
<h2><input type="checkbox" class="follow" checked> Follow</h2>

<ul class="messages"></ul>

<script>
  Element.prototype.prependChild = function(child) { this.insertBefore(child, this.firstChild); };

  window.addEventListener('load', function () {

    var $messages = document.querySelector('.messages'),
        $follow = document.querySelector('.follow');

    $messages.addEventListener('scroll', function () {
      if ($messages.scrollTop < $messages.scrollHeight - $messages.clientHeight) {
        $follow.checked = false;
      } else {
        $follow.checked = true;
      }
    }, false);

    var newMessage = function (message) {
      var li = document.createElement('li');
      li.textContent = message.data;
      if (message.type) li.classList.add(message.type);
      return li;
    };

    var scrollToBottom = function (elem) {
      if (!$follow.checked) return;
      if (elem.scrollHeight > elem.clientHeight) {
        elem.scrollTop = elem.scrollHeight - elem.clientHeight;
      }
    };

    var socket;

    var tryToConnect = function () {
      socket = new WebSocket("ws://" + window.location.hostname + ":5255/");

      socket.onopen = function() {
        $messages.appendChild(newMessage({
          data: 'Connected...',
          type: 'success'
        }));
        scrollToBottom($messages);
      };

      socket.onmessage = function(message) {
        console.log(message);
        message.data.split('\n').forEach(function (line) {
          $messages.appendChild(newMessage({
            data: line
          }));
        });
        scrollToBottom($messages);
      };

      socket.onclose = function() {
        $messages.appendChild(newMessage({
          data: 'Disconnected.',
          type: 'error'
        }));
        $messages.appendChild(newMessage({
          data: 'Attempting to reconnect...',
          type: 'info'
        }));
        scrollToBottom($messages);
      };
    };

    setInterval(function () {
      if (!socket || socket.readyState > 1) {
        tryToConnect();
      }
    }, 5000);

    tryToConnect();

  }, false);
</script>